// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tripNft

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TripNftHexTime is an auto generated low-level Go binding around an user-defined struct.
type TripNftHexTime struct {
	HexIndex uint64
	Time     uint64
}

// TripNftSegmentInfo is an auto generated low-level Go binding around an user-defined struct.
type TripNftSegmentInfo struct {
	Owner       common.Address
	VehicleNode *big.Int
	TokenId     *big.Int
	BundlrId    string
	Start       TripNftHexTime
	End         TripNftHexTime
}

// TripNftMetaData contains all meta data concerning the TripNft contract.
var TripNftMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bundlrId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startHex\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endHex\",\"type\":\"uint64\"}],\"name\":\"SegmentMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tripTokenId\",\"type\":\"uint256\"}],\"name\":\"_segmentInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"bundlrId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"hexIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"structTripNft.HexTime\",\"name\":\"start\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"hexIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"structTripNft.HexTime\",\"name\":\"end\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tripId\",\"type\":\"uint256\"}],\"name\":\"getSegmentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"bundlrId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"hexIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"structTripNft.HexTime\",\"name\":\"start\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"hexIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"internalType\":\"structTripNft.HexTime\",\"name\":\"end\",\"type\":\"tuple\"}],\"internalType\":\"structTripNft.SegmentInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vehicleNode\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startHex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endHex\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"bundlrId\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tripTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b506040518060400160405280600781526020017f547269704e6674000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5452495000000000000000000000000000000000000000000000000000000000815250815f90816200008d91906200043f565b5080600190816200009f91906200043f565b505050620000c2620000b6620000d960201b60201c565b620000e060201b60201c565b620000d333620000e060201b60201c565b62000523565b5f33905090565b60075f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905562000115816200011860201b60201c565b50565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200025757607f821691505b6020821081036200026d576200026c62000212565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620002d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000294565b620002dd868362000294565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f62000327620003216200031b84620002f5565b620002fe565b620002f5565b9050919050565b5f819050919050565b620003428362000307565b6200035a62000351826200032e565b848454620002a0565b825550505050565b5f90565b6200037062000362565b6200037d81848462000337565b505050565b5b81811015620003a457620003985f8262000366565b60018101905062000383565b5050565b601f821115620003f357620003bd8162000273565b620003c88462000285565b81016020851015620003d8578190505b620003f0620003e78562000285565b83018262000382565b50505b505050565b5f82821c905092915050565b5f620004155f1984600802620003f8565b1980831691505092915050565b5f6200042f838362000404565b9150826002028217905092915050565b6200044a82620001db565b67ffffffffffffffff811115620004665762000465620001e5565b5b6200047282546200023f565b6200047f828285620003a8565b5f60209050601f831160018114620004b5575f8415620004a0578287015190505b620004ac858262000422565b8655506200051b565b601f198416620004c58662000273565b5f5b82811015620004ee57848901518255600182019150602085019450602081019050620004c7565b868310156200050e57848901516200050a601f89168262000404565b8355505b6001600288020188555050505b505050505050565b61367680620005315f395ff3fe608060405234801561000f575f80fd5b5060043610610140575f3560e01c80638ae33465116100b6578063a62d997c1161007a578063a62d997c1461034c578063b88d4fde14610381578063c87b56dd1461039d578063e30c3978146103cd578063e985e9c5146103eb578063f2fde38b1461041b57610140565b80638ae33465146102ba5780638da5cb5b146102d657806395d89b41146102f45780639b9d962514610312578063a22cb4651461033057610140565b806342842e0e1161010857806342842e0e146101fa5780635e6bda0e146102165780636352211e1461024657806370a0823114610276578063715018a6146102a657806379ba5097146102b057610140565b806301ffc9a71461014457806306fdde0314610174578063081812fc14610192578063095ea7b3146101c257806323b872dd146101de575b5f80fd5b61015e60048036038101906101599190612242565b610437565b60405161016b9190612287565b60405180910390f35b61017c610518565b604051610189919061232a565b60405180910390f35b6101ac60048036038101906101a7919061237d565b6105a7565b6040516101b991906123e7565b60405180910390f35b6101dc60048036038101906101d7919061242a565b6105e9565b005b6101f860048036038101906101f39190612468565b6106ff565b005b610214600480360381019061020f9190612468565b61075f565b005b610230600480360381019061022b919061237d565b61077e565b60405161023d91906125f4565b60405180910390f35b610260600480360381019061025b919061237d565b61098b565b60405161026d91906123e7565b60405180910390f35b610290600480360381019061028b9190612614565b610a0f565b60405161029d919061264e565b60405180910390f35b6102ae610ac3565b005b6102b8610ad6565b005b6102d460048036038101906102cf91906126f2565b610b62565b005b6102de610e19565b6040516102eb91906123e7565b60405180910390f35b6102fc610e41565b604051610309919061232a565b60405180910390f35b61031a610ed1565b604051610327919061264e565b60405180910390f35b61034a600480360381019061034591906127d9565b610ed7565b005b6103666004803603810190610361919061237d565b610eed565b60405161037896959493929190612844565b60405180910390f35b61039b600480360381019061039691906129d3565b6110a0565b005b6103b760048036038101906103b2919061237d565b611102565b6040516103c4919061232a565b60405180910390f35b6103d5611167565b6040516103e291906123e7565b60405180910390f35b61040560048036038101906104009190612a53565b61118f565b6040516104129190612287565b60405180910390f35b61043560048036038101906104309190612614565b61121d565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061050157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105115750610510826112c9565b5b9050919050565b60605f805461052690612abe565b80601f016020809104026020016040519081016040528092919081815260200182805461055290612abe565b801561059d5780601f106105745761010080835404028352916020019161059d565b820191905f5260205f20905b81548152906001019060200180831161058057829003601f168201915b5050505050905090565b5f6105b182611332565b60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f6105f38261098b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065a90612b5e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661068261137d565b73ffffffffffffffffffffffffffffffffffffffff1614806106b157506106b0816106ab61137d565b61118f565b5b6106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e790612bec565b60405180910390fd5b6106fa8383611384565b505050565b61071061070a61137d565b8261143a565b61074f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074690612c7a565b60405180910390fd5b61075a8383836114ce565b505050565b61077983838360405180602001604052805f8152506110a0565b505050565b61078661215b565b60085f8381526020019081526020015f206040518060c00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201805461081a90612abe565b80601f016020809104026020016040519081016040528092919081815260200182805461084690612abe565b80156108915780601f1061086857610100808354040283529160200191610891565b820191905f5260205f20905b81548152906001019060200180831161087457829003601f168201915b50505050508152602001600482016040518060400160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020015f820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250508152602001600582016040518060400160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020015f820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050815250509050919050565b5f80610996836117ba565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90612ce2565b60405180910390fd5b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7590612d70565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610acb6117f3565b610ad45f611871565b565b5f610adf61137d565b90508073ffffffffffffffffffffffffffffffffffffffff16610b00611167565b73ffffffffffffffffffffffffffffffffffffffff1614610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90612dfe565b60405180910390fd5b610b5f81611871565b50565b610b6a6117f3565b60095f815480929190610b7c90612e49565b91905055506040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001888152602001600954815260200183838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050815260200160405180604001604052808767ffffffffffffffff1681526020018967ffffffffffffffff16815250815260200160405180604001604052808667ffffffffffffffff1681526020018867ffffffffffffffff1681525081525060085f60095481526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003019081610cd9919061302d565b506080820151816004015f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151815f0160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505060a0820151816005015f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506020820151815f0160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050905050610db3886009546118a1565b8773ffffffffffffffffffffffffffffffffffffffff16600954887f301ef19fdad14044137a731a775359feec39564c1fe268c00417673bdc6521a085858b8b8b8b604051610e0796959493929190613137565b60405180910390a45050505050505050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610e5090612abe565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7c90612abe565b8015610ec75780601f10610e9e57610100808354040283529160200191610ec7565b820191905f5260205f20905b815481529060010190602001808311610eaa57829003601f168201915b5050505050905090565b60095481565b610ee9610ee261137d565b8383611ab4565b5050565b6008602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003018054610f3d90612abe565b80601f0160208091040260200160405190810160405280929190818152602001828054610f6990612abe565b8015610fb45780601f10610f8b57610100808354040283529160200191610fb4565b820191905f5260205f20905b815481529060010190602001808311610f9757829003601f168201915b505050505090806004016040518060400160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020015f820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505090806005016040518060400160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020015f820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905086565b6110b16110ab61137d565b8361143a565b6110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790612c7a565b60405180910390fd5b6110fc84848484611c1b565b50505050565b606061110d82611332565b5f611116611c77565b90505f8151116111345760405180602001604052805f81525061115f565b8061113e84611c8d565b60405160200161114f9291906131cb565b6040516020818303038152906040525b915050919050565b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b6112256117f3565b8060075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16611284610e19565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61133b81611d57565b61137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190612ce2565b60405180910390fd5b50565b5f33905090565b8160045f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166113f48361098b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5f806114458361098b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806114875750611486818561118f565b5b806114c557508373ffffffffffffffffffffffffffffffffffffffff166114ad846105a7565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166114ee8261098b565b73ffffffffffffffffffffffffffffffffffffffff1614611544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153b9061325e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a9906132ec565b60405180910390fd5b6115bf8383836001611d97565b8273ffffffffffffffffffffffffffffffffffffffff166115df8261098b565b73ffffffffffffffffffffffffffffffffffffffff1614611635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162c9061325e565b60405180910390fd5b60045f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600160035f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282540392505081905550600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117b58383836001611d9d565b505050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6117fb61137d565b73ffffffffffffffffffffffffffffffffffffffff16611819610e19565b73ffffffffffffffffffffffffffffffffffffffff161461186f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186690613354565b60405180910390fd5b565b60075f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905561189e81611da3565b50565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361190f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611906906133bc565b60405180910390fd5b61191881611d57565b15611958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f90613424565b60405180910390fd5b6119655f83836001611d97565b61196e81611d57565b156119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a590613424565b60405180910390fd5b600160035f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508160025f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ab05f83836001611d9d565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b199061348c565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c0e9190612287565b60405180910390a3505050565b611c268484846114ce565b611c3284848484611e66565b611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c689061351a565b60405180910390fd5b50505050565b606060405180602001604052805f815250905090565b60605f6001611c9b84611fe8565b0190505f8167ffffffffffffffff811115611cb957611cb86128af565b5b6040519080825280601f01601f191660200182016040528015611ceb5781602001600182028036833780820191505090505b5090505f82602001820190505b600115611d4c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d4157611d40613538565b5b0494505f8503611cf8575b819350505050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff16611d78836117ba565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f611e868473ffffffffffffffffffffffffffffffffffffffff16612139565b15611fdb578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611eaf61137d565b8786866040518563ffffffff1660e01b8152600401611ed194939291906135b7565b6020604051808303815f875af1925050508015611f0c57506040513d601f19601f82011682018060405250810190611f099190613615565b60015b611f8b573d805f8114611f3a576040519150601f19603f3d011682016040523d82523d5f602084013e611f3f565b606091505b505f815103611f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7a9061351a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611fe0565b600190505b949350505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612044577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161203a57612039613538565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612081576d04ee2d6d415b85acef8100000000838161207757612076613538565b5b0492506020810190505b662386f26fc1000083106120b057662386f26fc1000083816120a6576120a5613538565b5b0492506010810190505b6305f5e10083106120d9576305f5e10083816120cf576120ce613538565b5b0492506008810190505b61271083106120fe5761271083816120f4576120f3613538565b5b0492506004810190505b60648310612121576064838161211757612116613538565b5b0492506002810190505b600a8310612130576001810190505b80915050919050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060c001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020016060815260200161219d6121b0565b81526020016121aa6121b0565b81525090565b60405180604001604052805f67ffffffffffffffff1681526020015f67ffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612221816121ed565b811461222b575f80fd5b50565b5f8135905061223c81612218565b92915050565b5f60208284031215612257576122566121e5565b5b5f6122648482850161222e565b91505092915050565b5f8115159050919050565b6122818161226d565b82525050565b5f60208201905061229a5f830184612278565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156122d75780820151818401526020810190506122bc565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6122fc826122a0565b61230681856122aa565b93506123168185602086016122ba565b61231f816122e2565b840191505092915050565b5f6020820190508181035f83015261234281846122f2565b905092915050565b5f819050919050565b61235c8161234a565b8114612366575f80fd5b50565b5f8135905061237781612353565b92915050565b5f60208284031215612392576123916121e5565b5b5f61239f84828501612369565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6123d1826123a8565b9050919050565b6123e1816123c7565b82525050565b5f6020820190506123fa5f8301846123d8565b92915050565b612409816123c7565b8114612413575f80fd5b50565b5f8135905061242481612400565b92915050565b5f80604083850312156124405761243f6121e5565b5b5f61244d85828601612416565b925050602061245e85828601612369565b9150509250929050565b5f805f6060848603121561247f5761247e6121e5565b5b5f61248c86828701612416565b935050602061249d86828701612416565b92505060406124ae86828701612369565b9150509250925092565b6124c1816123c7565b82525050565b6124d08161234a565b82525050565b5f82825260208201905092915050565b5f6124f0826122a0565b6124fa81856124d6565b935061250a8185602086016122ba565b612513816122e2565b840191505092915050565b5f67ffffffffffffffff82169050919050565b61253a8161251e565b82525050565b604082015f8201516125545f850182612531565b5060208201516125676020850182612531565b50505050565b5f61010083015f8301516125835f8601826124b8565b50602083015161259660208601826124c7565b5060408301516125a960408601826124c7565b50606083015184820360608601526125c182826124e6565b91505060808301516125d66080860182612540565b5060a08301516125e960c0860182612540565b508091505092915050565b5f6020820190508181035f83015261260c818461256d565b905092915050565b5f60208284031215612629576126286121e5565b5b5f61263684828501612416565b91505092915050565b6126488161234a565b82525050565b5f6020820190506126615f83018461263f565b92915050565b6126708161251e565b811461267a575f80fd5b50565b5f8135905061268b81612667565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126126b2576126b1612691565b5b8235905067ffffffffffffffff8111156126cf576126ce612695565b5b6020830191508360018202830111156126eb576126ea612699565b5b9250929050565b5f805f805f805f8060e0898b03121561270e5761270d6121e5565b5b5f61271b8b828c01612416565b985050602061272c8b828c01612369565b975050604061273d8b828c0161267d565b965050606061274e8b828c0161267d565b955050608061275f8b828c0161267d565b94505060a06127708b828c0161267d565b93505060c089013567ffffffffffffffff811115612791576127906121e9565b5b61279d8b828c0161269d565b92509250509295985092959890939650565b6127b88161226d565b81146127c2575f80fd5b50565b5f813590506127d3816127af565b92915050565b5f80604083850312156127ef576127ee6121e5565b5b5f6127fc85828601612416565b925050602061280d858286016127c5565b9150509250929050565b604082015f82015161282b5f850182612531565b50602082015161283e6020850182612531565b50505050565b5f610100820190506128585f8301896123d8565b612865602083018861263f565b612872604083018761263f565b818103606083015261288481866122f2565b90506128936080830185612817565b6128a060c0830184612817565b979650505050505050565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6128e5826122e2565b810181811067ffffffffffffffff82111715612904576129036128af565b5b80604052505050565b5f6129166121dc565b905061292282826128dc565b919050565b5f67ffffffffffffffff821115612941576129406128af565b5b61294a826122e2565b9050602081019050919050565b828183375f83830152505050565b5f61297761297284612927565b61290d565b905082815260208101848484011115612993576129926128ab565b5b61299e848285612957565b509392505050565b5f82601f8301126129ba576129b9612691565b5b81356129ca848260208601612965565b91505092915050565b5f805f80608085870312156129eb576129ea6121e5565b5b5f6129f887828801612416565b9450506020612a0987828801612416565b9350506040612a1a87828801612369565b925050606085013567ffffffffffffffff811115612a3b57612a3a6121e9565b5b612a47878288016129a6565b91505092959194509250565b5f8060408385031215612a6957612a686121e5565b5b5f612a7685828601612416565b9250506020612a8785828601612416565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612ad557607f821691505b602082108103612ae857612ae7612a91565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e655f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f612b486021836122aa565b9150612b5382612aee565b604082019050919050565b5f6020820190508181035f830152612b7581612b3c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f5f8201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b5f612bd6603d836122aa565b9150612be182612b7c565b604082019050919050565b5f6020820190508181035f830152612c0381612bca565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e655f8201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b5f612c64602d836122aa565b9150612c6f82612c0a565b604082019050919050565b5f6020820190508181035f830152612c9181612c58565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e20494400000000000000005f82015250565b5f612ccc6018836122aa565b9150612cd782612c98565b602082019050919050565b5f6020820190508181035f830152612cf981612cc0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f7420612076615f8201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b5f612d5a6029836122aa565b9150612d6582612d00565b604082019050919050565b5f6020820190508181035f830152612d8781612d4e565b9050919050565b7f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865205f8201527f6e6577206f776e65720000000000000000000000000000000000000000000000602082015250565b5f612de86029836122aa565b9150612df382612d8e565b604082019050919050565b5f6020820190508181035f830152612e1581612ddc565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612e538261234a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e8557612e84612e1c565b5b600182019050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612eec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612eb1565b612ef68683612eb1565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612f31612f2c612f278461234a565b612f0e565b61234a565b9050919050565b5f819050919050565b612f4a83612f17565b612f5e612f5682612f38565b848454612ebd565b825550505050565b5f90565b612f72612f66565b612f7d818484612f41565b505050565b5b81811015612fa057612f955f82612f6a565b600181019050612f83565b5050565b601f821115612fe557612fb681612e90565b612fbf84612ea2565b81016020851015612fce578190505b612fe2612fda85612ea2565b830182612f82565b50505b505050565b5f82821c905092915050565b5f6130055f1984600802612fea565b1980831691505092915050565b5f61301d8383612ff6565b9150826002028217905092915050565b613036826122a0565b67ffffffffffffffff81111561304f5761304e6128af565b5b6130598254612abe565b613064828285612fa4565b5f60209050601f831160018114613095575f8415613083578287015190505b61308d8582613012565b8655506130f4565b601f1984166130a386612e90565b5f5b828110156130ca578489015182556001820191506020850194506020810190506130a5565b868310156130e757848901516130e3601f891682612ff6565b8355505b6001600288020188555050505b505050505050565b5f61310783856122aa565b9350613114838584612957565b61311d836122e2565b840190509392505050565b6131318161251e565b82525050565b5f60a0820190508181035f83015261315081888a6130fc565b905061315f6020830187613128565b61316c6040830186613128565b6131796060830185613128565b6131866080830184613128565b979650505050505050565b5f81905092915050565b5f6131a5826122a0565b6131af8185613191565b93506131bf8185602086016122ba565b80840191505092915050565b5f6131d6828561319b565b91506131e2828461319b565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f7272656374205f8201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b5f6132486025836122aa565b9150613253826131ee565b604082019050919050565b5f6020820190508181035f8301526132758161323c565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6132d66024836122aa565b91506132e18261327c565b604082019050919050565b5f6020820190508181035f830152613303816132ca565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61333e6020836122aa565b91506133498261330a565b602082019050919050565b5f6020820190508181035f83015261336b81613332565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f20616464726573735f82015250565b5f6133a66020836122aa565b91506133b182613372565b602082019050919050565b5f6020820190508181035f8301526133d38161339a565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e746564000000005f82015250565b5f61340e601c836122aa565b9150613419826133da565b602082019050919050565b5f6020820190508181035f83015261343b81613402565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c6572000000000000005f82015250565b5f6134766019836122aa565b915061348182613442565b602082019050919050565b5f6020820190508181035f8301526134a38161346a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e2045524337323152655f8201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b5f6135046032836122aa565b915061350f826134aa565b604082019050919050565b5f6020820190508181035f830152613531816134f8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f61358982613565565b613593818561356f565b93506135a38185602086016122ba565b6135ac816122e2565b840191505092915050565b5f6080820190506135ca5f8301876123d8565b6135d760208301866123d8565b6135e4604083018561263f565b81810360608301526135f6818461357f565b905095945050505050565b5f8151905061360f81612218565b92915050565b5f6020828403121561362a576136296121e5565b5b5f61363784828501613601565b9150509291505056fea2646970667358221220689df4059f543f6e0d2f14e6380dbda2046c23c048ba1c56fef785039b85e00964736f6c63430008150033",
}

// TripNftABI is the input ABI used to generate the binding from.
// Deprecated: Use TripNftMetaData.ABI instead.
var TripNftABI = TripNftMetaData.ABI

// TripNftBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TripNftMetaData.Bin instead.
var TripNftBin = TripNftMetaData.Bin

// DeployTripNft deploys a new Ethereum contract, binding an instance of TripNft to it.
func DeployTripNft(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TripNft, error) {
	parsed, err := TripNftMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TripNftBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TripNft{TripNftCaller: TripNftCaller{contract: contract}, TripNftTransactor: TripNftTransactor{contract: contract}, TripNftFilterer: TripNftFilterer{contract: contract}}, nil
}

// TripNft is an auto generated Go binding around an Ethereum contract.
type TripNft struct {
	TripNftCaller     // Read-only binding to the contract
	TripNftTransactor // Write-only binding to the contract
	TripNftFilterer   // Log filterer for contract events
}

// TripNftCaller is an auto generated read-only Go binding around an Ethereum contract.
type TripNftCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TripNftTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TripNftTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TripNftFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TripNftFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TripNftSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TripNftSession struct {
	Contract     *TripNft          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TripNftCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TripNftCallerSession struct {
	Contract *TripNftCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// TripNftTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TripNftTransactorSession struct {
	Contract     *TripNftTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TripNftRaw is an auto generated low-level Go binding around an Ethereum contract.
type TripNftRaw struct {
	Contract *TripNft // Generic contract binding to access the raw methods on
}

// TripNftCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TripNftCallerRaw struct {
	Contract *TripNftCaller // Generic read-only contract binding to access the raw methods on
}

// TripNftTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TripNftTransactorRaw struct {
	Contract *TripNftTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTripNft creates a new instance of TripNft, bound to a specific deployed contract.
func NewTripNft(address common.Address, backend bind.ContractBackend) (*TripNft, error) {
	contract, err := bindTripNft(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TripNft{TripNftCaller: TripNftCaller{contract: contract}, TripNftTransactor: TripNftTransactor{contract: contract}, TripNftFilterer: TripNftFilterer{contract: contract}}, nil
}

// NewTripNftCaller creates a new read-only instance of TripNft, bound to a specific deployed contract.
func NewTripNftCaller(address common.Address, caller bind.ContractCaller) (*TripNftCaller, error) {
	contract, err := bindTripNft(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TripNftCaller{contract: contract}, nil
}

// NewTripNftTransactor creates a new write-only instance of TripNft, bound to a specific deployed contract.
func NewTripNftTransactor(address common.Address, transactor bind.ContractTransactor) (*TripNftTransactor, error) {
	contract, err := bindTripNft(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TripNftTransactor{contract: contract}, nil
}

// NewTripNftFilterer creates a new log filterer instance of TripNft, bound to a specific deployed contract.
func NewTripNftFilterer(address common.Address, filterer bind.ContractFilterer) (*TripNftFilterer, error) {
	contract, err := bindTripNft(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TripNftFilterer{contract: contract}, nil
}

// bindTripNft binds a generic wrapper to an already deployed contract.
func bindTripNft(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TripNftABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TripNft *TripNftRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TripNft.Contract.TripNftCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TripNft *TripNftRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TripNft.Contract.TripNftTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TripNft *TripNftRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TripNft.Contract.TripNftTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TripNft *TripNftCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TripNft.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TripNft *TripNftTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TripNft.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TripNft *TripNftTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TripNft.Contract.contract.Transact(opts, method, params...)
}

// SegmentInfo is a free data retrieval call binding the contract method 0xa62d997c.
//
// Solidity: function _segmentInfo(uint256 tripTokenId) view returns(address owner, uint256 vehicleNode, uint256 tokenId, string bundlrId, (uint64,uint64) start, (uint64,uint64) end)
func (_TripNft *TripNftCaller) SegmentInfo(opts *bind.CallOpts, tripTokenId *big.Int) (struct {
	Owner       common.Address
	VehicleNode *big.Int
	TokenId     *big.Int
	BundlrId    string
	Start       TripNftHexTime
	End         TripNftHexTime
}, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "_segmentInfo", tripTokenId)

	outstruct := new(struct {
		Owner       common.Address
		VehicleNode *big.Int
		TokenId     *big.Int
		BundlrId    string
		Start       TripNftHexTime
		End         TripNftHexTime
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.VehicleNode = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TokenId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.BundlrId = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Start = *abi.ConvertType(out[4], new(TripNftHexTime)).(*TripNftHexTime)
	outstruct.End = *abi.ConvertType(out[5], new(TripNftHexTime)).(*TripNftHexTime)

	return *outstruct, err

}

// SegmentInfo is a free data retrieval call binding the contract method 0xa62d997c.
//
// Solidity: function _segmentInfo(uint256 tripTokenId) view returns(address owner, uint256 vehicleNode, uint256 tokenId, string bundlrId, (uint64,uint64) start, (uint64,uint64) end)
func (_TripNft *TripNftSession) SegmentInfo(tripTokenId *big.Int) (struct {
	Owner       common.Address
	VehicleNode *big.Int
	TokenId     *big.Int
	BundlrId    string
	Start       TripNftHexTime
	End         TripNftHexTime
}, error) {
	return _TripNft.Contract.SegmentInfo(&_TripNft.CallOpts, tripTokenId)
}

// SegmentInfo is a free data retrieval call binding the contract method 0xa62d997c.
//
// Solidity: function _segmentInfo(uint256 tripTokenId) view returns(address owner, uint256 vehicleNode, uint256 tokenId, string bundlrId, (uint64,uint64) start, (uint64,uint64) end)
func (_TripNft *TripNftCallerSession) SegmentInfo(tripTokenId *big.Int) (struct {
	Owner       common.Address
	VehicleNode *big.Int
	TokenId     *big.Int
	BundlrId    string
	Start       TripNftHexTime
	End         TripNftHexTime
}, error) {
	return _TripNft.Contract.SegmentInfo(&_TripNft.CallOpts, tripTokenId)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TripNft *TripNftCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TripNft *TripNftSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TripNft.Contract.BalanceOf(&_TripNft.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TripNft *TripNftCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TripNft.Contract.BalanceOf(&_TripNft.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TripNft *TripNftCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TripNft *TripNftSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TripNft.Contract.GetApproved(&_TripNft.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TripNft *TripNftCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TripNft.Contract.GetApproved(&_TripNft.CallOpts, tokenId)
}

// GetSegmentInfo is a free data retrieval call binding the contract method 0x5e6bda0e.
//
// Solidity: function getSegmentInfo(uint256 tripId) view returns((address,uint256,uint256,string,(uint64,uint64),(uint64,uint64)) info)
func (_TripNft *TripNftCaller) GetSegmentInfo(opts *bind.CallOpts, tripId *big.Int) (TripNftSegmentInfo, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "getSegmentInfo", tripId)

	if err != nil {
		return *new(TripNftSegmentInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TripNftSegmentInfo)).(*TripNftSegmentInfo)

	return out0, err

}

// GetSegmentInfo is a free data retrieval call binding the contract method 0x5e6bda0e.
//
// Solidity: function getSegmentInfo(uint256 tripId) view returns((address,uint256,uint256,string,(uint64,uint64),(uint64,uint64)) info)
func (_TripNft *TripNftSession) GetSegmentInfo(tripId *big.Int) (TripNftSegmentInfo, error) {
	return _TripNft.Contract.GetSegmentInfo(&_TripNft.CallOpts, tripId)
}

// GetSegmentInfo is a free data retrieval call binding the contract method 0x5e6bda0e.
//
// Solidity: function getSegmentInfo(uint256 tripId) view returns((address,uint256,uint256,string,(uint64,uint64),(uint64,uint64)) info)
func (_TripNft *TripNftCallerSession) GetSegmentInfo(tripId *big.Int) (TripNftSegmentInfo, error) {
	return _TripNft.Contract.GetSegmentInfo(&_TripNft.CallOpts, tripId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TripNft *TripNftCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TripNft *TripNftSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TripNft.Contract.IsApprovedForAll(&_TripNft.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TripNft *TripNftCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TripNft.Contract.IsApprovedForAll(&_TripNft.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TripNft *TripNftCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TripNft *TripNftSession) Name() (string, error) {
	return _TripNft.Contract.Name(&_TripNft.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TripNft *TripNftCallerSession) Name() (string, error) {
	return _TripNft.Contract.Name(&_TripNft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TripNft *TripNftCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TripNft *TripNftSession) Owner() (common.Address, error) {
	return _TripNft.Contract.Owner(&_TripNft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TripNft *TripNftCallerSession) Owner() (common.Address, error) {
	return _TripNft.Contract.Owner(&_TripNft.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TripNft *TripNftCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TripNft *TripNftSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TripNft.Contract.OwnerOf(&_TripNft.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TripNft *TripNftCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TripNft.Contract.OwnerOf(&_TripNft.CallOpts, tokenId)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_TripNft *TripNftCaller) PendingOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "pendingOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_TripNft *TripNftSession) PendingOwner() (common.Address, error) {
	return _TripNft.Contract.PendingOwner(&_TripNft.CallOpts)
}

// PendingOwner is a free data retrieval call binding the contract method 0xe30c3978.
//
// Solidity: function pendingOwner() view returns(address)
func (_TripNft *TripNftCallerSession) PendingOwner() (common.Address, error) {
	return _TripNft.Contract.PendingOwner(&_TripNft.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TripNft *TripNftCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TripNft *TripNftSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TripNft.Contract.SupportsInterface(&_TripNft.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TripNft *TripNftCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TripNft.Contract.SupportsInterface(&_TripNft.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TripNft *TripNftCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TripNft *TripNftSession) Symbol() (string, error) {
	return _TripNft.Contract.Symbol(&_TripNft.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TripNft *TripNftCallerSession) Symbol() (string, error) {
	return _TripNft.Contract.Symbol(&_TripNft.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TripNft *TripNftCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TripNft *TripNftSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TripNft.Contract.TokenURI(&_TripNft.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TripNft *TripNftCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TripNft.Contract.TokenURI(&_TripNft.CallOpts, tokenId)
}

// TripTokenId is a free data retrieval call binding the contract method 0x9b9d9625.
//
// Solidity: function tripTokenId() view returns(uint256)
func (_TripNft *TripNftCaller) TripTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TripNft.contract.Call(opts, &out, "tripTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TripTokenId is a free data retrieval call binding the contract method 0x9b9d9625.
//
// Solidity: function tripTokenId() view returns(uint256)
func (_TripNft *TripNftSession) TripTokenId() (*big.Int, error) {
	return _TripNft.Contract.TripTokenId(&_TripNft.CallOpts)
}

// TripTokenId is a free data retrieval call binding the contract method 0x9b9d9625.
//
// Solidity: function tripTokenId() view returns(uint256)
func (_TripNft *TripNftCallerSession) TripTokenId() (*big.Int, error) {
	return _TripNft.Contract.TripTokenId(&_TripNft.CallOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_TripNft *TripNftTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "acceptOwnership")
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_TripNft *TripNftSession) AcceptOwnership() (*types.Transaction, error) {
	return _TripNft.Contract.AcceptOwnership(&_TripNft.TransactOpts)
}

// AcceptOwnership is a paid mutator transaction binding the contract method 0x79ba5097.
//
// Solidity: function acceptOwnership() returns()
func (_TripNft *TripNftTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _TripNft.Contract.AcceptOwnership(&_TripNft.TransactOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TripNft *TripNftSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.Approve(&_TripNft.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.Approve(&_TripNft.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x8ae33465.
//
// Solidity: function mint(address to, uint256 vehicleNode, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex, string bundlrId) returns()
func (_TripNft *TripNftTransactor) Mint(opts *bind.TransactOpts, to common.Address, vehicleNode *big.Int, startTime uint64, endTime uint64, startHex uint64, endHex uint64, bundlrId string) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "mint", to, vehicleNode, startTime, endTime, startHex, endHex, bundlrId)
}

// Mint is a paid mutator transaction binding the contract method 0x8ae33465.
//
// Solidity: function mint(address to, uint256 vehicleNode, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex, string bundlrId) returns()
func (_TripNft *TripNftSession) Mint(to common.Address, vehicleNode *big.Int, startTime uint64, endTime uint64, startHex uint64, endHex uint64, bundlrId string) (*types.Transaction, error) {
	return _TripNft.Contract.Mint(&_TripNft.TransactOpts, to, vehicleNode, startTime, endTime, startHex, endHex, bundlrId)
}

// Mint is a paid mutator transaction binding the contract method 0x8ae33465.
//
// Solidity: function mint(address to, uint256 vehicleNode, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex, string bundlrId) returns()
func (_TripNft *TripNftTransactorSession) Mint(to common.Address, vehicleNode *big.Int, startTime uint64, endTime uint64, startHex uint64, endHex uint64, bundlrId string) (*types.Transaction, error) {
	return _TripNft.Contract.Mint(&_TripNft.TransactOpts, to, vehicleNode, startTime, endTime, startHex, endHex, bundlrId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TripNft *TripNftTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TripNft *TripNftSession) RenounceOwnership() (*types.Transaction, error) {
	return _TripNft.Contract.RenounceOwnership(&_TripNft.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TripNft *TripNftTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TripNft.Contract.RenounceOwnership(&_TripNft.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.SafeTransferFrom(&_TripNft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.SafeTransferFrom(&_TripNft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TripNft *TripNftTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TripNft *TripNftSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TripNft.Contract.SafeTransferFrom0(&_TripNft.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_TripNft *TripNftTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _TripNft.Contract.SafeTransferFrom0(&_TripNft.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TripNft *TripNftTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TripNft *TripNftSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TripNft.Contract.SetApprovalForAll(&_TripNft.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TripNft *TripNftTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TripNft.Contract.SetApprovalForAll(&_TripNft.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.TransferFrom(&_TripNft.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TripNft *TripNftTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TripNft.Contract.TransferFrom(&_TripNft.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TripNft *TripNftTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TripNft.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TripNft *TripNftSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TripNft.Contract.TransferOwnership(&_TripNft.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TripNft *TripNftTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TripNft.Contract.TransferOwnership(&_TripNft.TransactOpts, newOwner)
}

// TripNftApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TripNft contract.
type TripNftApprovalIterator struct {
	Event *TripNftApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftApproval represents a Approval event raised by the TripNft contract.
type TripNftApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TripNftApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TripNftApprovalIterator{contract: _TripNft.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TripNftApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftApproval)
				if err := _TripNft.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) ParseApproval(log types.Log) (*TripNftApproval, error) {
	event := new(TripNftApproval)
	if err := _TripNft.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TripNftApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TripNft contract.
type TripNftApprovalForAllIterator struct {
	Event *TripNftApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftApprovalForAll represents a ApprovalForAll event raised by the TripNft contract.
type TripNftApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TripNft *TripNftFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TripNftApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TripNftApprovalForAllIterator{contract: _TripNft.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TripNft *TripNftFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TripNftApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftApprovalForAll)
				if err := _TripNft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TripNft *TripNftFilterer) ParseApprovalForAll(log types.Log) (*TripNftApprovalForAll, error) {
	event := new(TripNftApprovalForAll)
	if err := _TripNft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TripNftOwnershipTransferStartedIterator is returned from FilterOwnershipTransferStarted and is used to iterate over the raw logs and unpacked data for OwnershipTransferStarted events raised by the TripNft contract.
type TripNftOwnershipTransferStartedIterator struct {
	Event *TripNftOwnershipTransferStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftOwnershipTransferStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftOwnershipTransferStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftOwnershipTransferStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftOwnershipTransferStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftOwnershipTransferStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftOwnershipTransferStarted represents a OwnershipTransferStarted event raised by the TripNft contract.
type TripNftOwnershipTransferStarted struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferStarted is a free log retrieval operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) FilterOwnershipTransferStarted(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TripNftOwnershipTransferStartedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TripNftOwnershipTransferStartedIterator{contract: _TripNft.contract, event: "OwnershipTransferStarted", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferStarted is a free log subscription operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) WatchOwnershipTransferStarted(opts *bind.WatchOpts, sink chan<- *TripNftOwnershipTransferStarted, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "OwnershipTransferStarted", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftOwnershipTransferStarted)
				if err := _TripNft.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferStarted is a log parse operation binding the contract event 0x38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700.
//
// Solidity: event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) ParseOwnershipTransferStarted(log types.Log) (*TripNftOwnershipTransferStarted, error) {
	event := new(TripNftOwnershipTransferStarted)
	if err := _TripNft.contract.UnpackLog(event, "OwnershipTransferStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TripNftOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TripNft contract.
type TripNftOwnershipTransferredIterator struct {
	Event *TripNftOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftOwnershipTransferred represents a OwnershipTransferred event raised by the TripNft contract.
type TripNftOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TripNftOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TripNftOwnershipTransferredIterator{contract: _TripNft.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TripNftOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftOwnershipTransferred)
				if err := _TripNft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TripNft *TripNftFilterer) ParseOwnershipTransferred(log types.Log) (*TripNftOwnershipTransferred, error) {
	event := new(TripNftOwnershipTransferred)
	if err := _TripNft.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TripNftSegmentMintedIterator is returned from FilterSegmentMinted and is used to iterate over the raw logs and unpacked data for SegmentMinted events raised by the TripNft contract.
type TripNftSegmentMintedIterator struct {
	Event *TripNftSegmentMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftSegmentMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftSegmentMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftSegmentMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftSegmentMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftSegmentMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftSegmentMinted represents a SegmentMinted event raised by the TripNft contract.
type TripNftSegmentMinted struct {
	VehicleNode *big.Int
	TokenId     *big.Int
	Owner       common.Address
	BundlrId    string
	StartTime   uint64
	EndTime     uint64
	StartHex    uint64
	EndHex      uint64
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSegmentMinted is a free log retrieval operation binding the contract event 0x301ef19fdad14044137a731a775359feec39564c1fe268c00417673bdc6521a0.
//
// Solidity: event SegmentMinted(uint256 indexed vehicleNode, uint256 indexed tokenId, address indexed owner, string bundlrId, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex)
func (_TripNft *TripNftFilterer) FilterSegmentMinted(opts *bind.FilterOpts, vehicleNode []*big.Int, tokenId []*big.Int, owner []common.Address) (*TripNftSegmentMintedIterator, error) {

	var vehicleNodeRule []interface{}
	for _, vehicleNodeItem := range vehicleNode {
		vehicleNodeRule = append(vehicleNodeRule, vehicleNodeItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "SegmentMinted", vehicleNodeRule, tokenIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &TripNftSegmentMintedIterator{contract: _TripNft.contract, event: "SegmentMinted", logs: logs, sub: sub}, nil
}

// WatchSegmentMinted is a free log subscription operation binding the contract event 0x301ef19fdad14044137a731a775359feec39564c1fe268c00417673bdc6521a0.
//
// Solidity: event SegmentMinted(uint256 indexed vehicleNode, uint256 indexed tokenId, address indexed owner, string bundlrId, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex)
func (_TripNft *TripNftFilterer) WatchSegmentMinted(opts *bind.WatchOpts, sink chan<- *TripNftSegmentMinted, vehicleNode []*big.Int, tokenId []*big.Int, owner []common.Address) (event.Subscription, error) {

	var vehicleNodeRule []interface{}
	for _, vehicleNodeItem := range vehicleNode {
		vehicleNodeRule = append(vehicleNodeRule, vehicleNodeItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "SegmentMinted", vehicleNodeRule, tokenIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftSegmentMinted)
				if err := _TripNft.contract.UnpackLog(event, "SegmentMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSegmentMinted is a log parse operation binding the contract event 0x301ef19fdad14044137a731a775359feec39564c1fe268c00417673bdc6521a0.
//
// Solidity: event SegmentMinted(uint256 indexed vehicleNode, uint256 indexed tokenId, address indexed owner, string bundlrId, uint64 startTime, uint64 endTime, uint64 startHex, uint64 endHex)
func (_TripNft *TripNftFilterer) ParseSegmentMinted(log types.Log) (*TripNftSegmentMinted, error) {
	event := new(TripNftSegmentMinted)
	if err := _TripNft.contract.UnpackLog(event, "SegmentMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TripNftTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TripNft contract.
type TripNftTransferIterator struct {
	Event *TripNftTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TripNftTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TripNftTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TripNftTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TripNftTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TripNftTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TripNftTransfer represents a Transfer event raised by the TripNft contract.
type TripNftTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TripNftTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TripNft.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TripNftTransferIterator{contract: _TripNft.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TripNftTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TripNft.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TripNftTransfer)
				if err := _TripNft.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TripNft *TripNftFilterer) ParseTransfer(log types.Log) (*TripNftTransfer, error) {
	event := new(TripNftTransfer)
	if err := _TripNft.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
