// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFulltrips(t *testing.T) {
	t.Parallel()

	query := Fulltrips()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFulltripsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulltripsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Fulltrips().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulltripsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulltripSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulltripsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FulltripExists(ctx, tx, o.TripID)
	if err != nil {
		t.Errorf("Unable to check if Fulltrip exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FulltripExists to return true, but got false.")
	}
}

func testFulltripsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fulltripFound, err := FindFulltrip(ctx, tx, o.TripID)
	if err != nil {
		t.Error(err)
	}

	if fulltripFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFulltripsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Fulltrips().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFulltripsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Fulltrips().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFulltripsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fulltripOne := &Fulltrip{}
	fulltripTwo := &Fulltrip{}
	if err = randomize.Struct(seed, fulltripOne, fulltripDBTypes, false, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}
	if err = randomize.Struct(seed, fulltripTwo, fulltripDBTypes, false, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulltripOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulltripTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fulltrips().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFulltripsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fulltripOne := &Fulltrip{}
	fulltripTwo := &Fulltrip{}
	if err = randomize.Struct(seed, fulltripOne, fulltripDBTypes, false, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}
	if err = randomize.Struct(seed, fulltripTwo, fulltripDBTypes, false, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulltripOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulltripTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fulltripBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func fulltripAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulltrip) error {
	*o = Fulltrip{}
	return nil
}

func testFulltripsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Fulltrip{}
	o := &Fulltrip{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fulltripDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Fulltrip object: %s", err)
	}

	AddFulltripHook(boil.BeforeInsertHook, fulltripBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fulltripBeforeInsertHooks = []FulltripHook{}

	AddFulltripHook(boil.AfterInsertHook, fulltripAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fulltripAfterInsertHooks = []FulltripHook{}

	AddFulltripHook(boil.AfterSelectHook, fulltripAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fulltripAfterSelectHooks = []FulltripHook{}

	AddFulltripHook(boil.BeforeUpdateHook, fulltripBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fulltripBeforeUpdateHooks = []FulltripHook{}

	AddFulltripHook(boil.AfterUpdateHook, fulltripAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fulltripAfterUpdateHooks = []FulltripHook{}

	AddFulltripHook(boil.BeforeDeleteHook, fulltripBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fulltripBeforeDeleteHooks = []FulltripHook{}

	AddFulltripHook(boil.AfterDeleteHook, fulltripAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fulltripAfterDeleteHooks = []FulltripHook{}

	AddFulltripHook(boil.BeforeUpsertHook, fulltripBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fulltripBeforeUpsertHooks = []FulltripHook{}

	AddFulltripHook(boil.AfterUpsertHook, fulltripAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fulltripAfterUpsertHooks = []FulltripHook{}
}

func testFulltripsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulltripsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fulltripColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulltripsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulltripsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulltripSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulltripsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fulltrips().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fulltripDBTypes = map[string]string{`TripID`: `text`, `DeviceID`: `text`, `TripStart`: `timestamp with time zone`, `TripEnd`: `timestamp with time zone`}
	_               = bytes.MinRead
)

func testFulltripsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fulltripPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fulltripAllColumns) == len(fulltripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFulltripsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fulltripAllColumns) == len(fulltripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fulltrip{}
	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulltripDBTypes, true, fulltripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fulltripAllColumns, fulltripPrimaryKeyColumns) {
		fields = fulltripAllColumns
	} else {
		fields = strmangle.SetComplement(
			fulltripAllColumns,
			fulltripPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FulltripSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFulltripsUpsert(t *testing.T) {
	t.Parallel()

	if len(fulltripAllColumns) == len(fulltripPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Fulltrip{}
	if err = randomize.Struct(seed, &o, fulltripDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fulltrip: %s", err)
	}

	count, err := Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fulltripDBTypes, false, fulltripPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulltrip struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fulltrip: %s", err)
	}

	count, err = Fulltrips().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
